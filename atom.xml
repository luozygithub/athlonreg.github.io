<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chentj&#39;s Blog</title>
  
  <subtitle>Inflexible thinking, bad humor</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tianjiec.top/"/>
  <updated>2018-12-19T11:46:28.251Z</updated>
  <id>https://tianjiec.top/</id>
  
  <author>
    <name>chentj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6 Promise用法</title>
    <link href="https://tianjiec.top/2018/12/19/ES6-Promise%E7%94%A8%E6%B3%95/"/>
    <id>https://tianjiec.top/2018/12/19/ES6-Promise用法/</id>
    <published>2018-12-19T11:33:07.000Z</published>
    <updated>2018-12-19T11:46:28.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-Promise-用法讲解"><a href="#ES6-Promise-用法讲解" class="headerlink" title="ES6 Promise 用法讲解"></a><a href="https://www.cnblogs.com/whybxy/p/7645578.html" target="_blank" rel="noopener">ES6 Promise 用法讲解</a></h1><blockquote><p>Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。</p></blockquote><p>那就new一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"执行完成"</span>);</span><br><span class="line">        resolve(<span class="string">"data"</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。其实这里用“成功”和“失败”来描述并不准确，按照标准来讲，resolve是将Promise的状态置为fullfiled，reject是将Promise的状态置为rejected。不过在我们开始阶段可以先这么理解，后面再细究概念。</p><p>在上面的代码中，我们执行了一个异步操作，也就是setTimeout，2秒后，输出“执行完成”，并且调用resolve方法。</p><p>运行代码，会在2秒后输出“执行完成”。注意！我只是new了一个对象，并没有调用它，我们传进去的函数就已经执行了，这是需要注意的一个细节。所以我们用Promise的时候一般是包在一个函数中，在需要的时候去运行这个函数，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">            resolve(<span class="string">'随便什么数据'</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line">runAsync()</span><br></pre></td></tr></table></figure><p>这时候你应该有两个疑问：1.包装这么一个函数有毛线用？2.resolve(‘随便什么数据’);这是干毛的？</p><p>我们继续来讲。在我们包装好的函数最后，会return出Promise对象，也就是说，执行这个函数我们得到了一个Promise对象。还记得Promise对象上有then、catch方法吧？这就是强大之处了，看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">runAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="comment">//后面可以用传过来的数据做些其他操作</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在runAsync()的返回上直接调用then方法，then接收一个参数，是函数，并且会拿到我们在runAsync中调用resolve时传的的参数。运行这段代码，会在2秒后输出“执行完成”，紧接着输出“随便什么数据”。</p><p>这时候你应该有所领悟了，原来then里面的函数就跟我们平时的回调函数一个意思，能够在runAsync这个异步任务执行完成之后被执行。这就是Promise的作用了，简单来讲，就是能把原来的回调写法分离出来，在异步操作执行完后，用链式调用的方式执行回调函数。</p><p>你可能会不屑一顾，那么牛逼轰轰的Promise就这点能耐？我把回调函数封装一下，给runAsync传进去不也一样吗，就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">        callback(<span class="string">'随便什么数据'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runAsync(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果也是一样的，还费劲用Promise干嘛。那么问题来了，有多层回调该怎么办？如果callback也是一个异步操作，而且执行完后也需要有相应的回调函数，该怎么办呢？总不能再定义一个callback2，然后给callback传进去吧。而Promise的优势在于，可以在then方法中继续写Promise对象并返回，然后继续调用then来进行回调操作。</p><p> <strong>链式操作的用法</strong></p><p>所以，从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">runAsync1()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync3();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样能够按顺序，每隔两秒输出每个异步回调中的内容，在runAsync2中传给resolve的数据，能在接下来的then方法中拿到。运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/520134/201603/520134-20160311004311507-221152206.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="reject的用法"><a href="#reject的用法" class="headerlink" title="reject的用法"></a><strong>reject的用法</strong></h2><p>到这里，你应该对“Promise是什么玩意”有了最基本的了解。那么我们接着来看看ES6的Promise还有哪些功能。我们光用了resolve，还没用reject呢，它是做什么的呢？事实上，我们前面的例子都是只有“执行成功”的回调，还没有“失败”的情况，reject的作用就是把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。看下面的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function getNumber()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            var num = Math.ceil(Math.random()*10); //生成1-10的随机数</span><br><span class="line">            if(num&lt;=5)&#123;</span><br><span class="line">                resolve(num);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                reject(&apos;数字太大了&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getNumber()</span><br><span class="line">.then(</span><br><span class="line">    function(data)&#123;</span><br><span class="line">        console.log(&apos;resolved&apos;);</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;, </span><br><span class="line">    function(reason, data)&#123;</span><br><span class="line">        console.log(&apos;rejected&apos;);</span><br><span class="line">        console.log(reason);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>getNumber函数用来异步获取一个数字，2秒后执行完成，如果数字小于等于5，我们认为是“成功”了，调用resolve修改Promise的状态。否则我们认为是“失败”了，调用reject并传递一个参数，作为失败的原因。</p><p>运行getNumber并且在then中传了两个参数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调。所以我们能够分别拿到他们传过来的数据。多次运行这段代码，你会随机得到下面两种结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/520134/201603/520134-20160311004616257-1024778840.png" alt="img](https://images2015.cnblogs.com/blog/520134/201603/520134-20160311004607960-1156803894.png)或者![img" title="">                </div>                <div class="image-caption">img](https://images2015.cnblogs.com/blog/520134/201603/520134-20160311004607960-1156803894.png)或者![img</div>            </figure><h2 id="catch的用法"><a href="#catch的用法" class="headerlink" title="catch的用法"></a><strong>catch的用法</strong></h2><p>我们知道Promise对象除了then方法，还有一个catch方法，它是做什么用的呢？其实它和then的第二个参数一样，用来指定reject的回调，用法是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(&apos;resolved&apos;);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(reason)&#123;</span><br><span class="line">    console.log(&apos;rejected&apos;);</span><br><span class="line">    console.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中。请看下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(&apos;resolved&apos;);</span><br><span class="line">    console.log(data);</span><br><span class="line">    console.log(somedata); //此处的somedata未定义</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(reason)&#123;</span><br><span class="line">    console.log(&apos;rejected&apos;);</span><br><span class="line">    console.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在resolve的回调中，我们console.log(somedata);而somedata这个变量是没有被定义的。如果我们不用Promise，代码运行到这里就直接在控制台报错了，不往下运行了。但是在这里，会得到这样的结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/520134/201603/520134-20160311004747147-1508291069.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>也就是说进到catch方法里面去了，而且把错误原因传到了reason参数中。即便是有错误的代码也不会报错了，这与我们的try/catch语句有相同的功能。</p><h2 id="all的用法"><a href="#all的用法" class="headerlink" title="all的用法"></a><strong>all的用法</strong></h2><p>Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。我们仍旧使用上面定义好的runAsync1、runAsync2、runAsync3这三个函数，看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Promise</span><br><span class="line">.all([runAsync1(), runAsync2(), runAsync3()])</span><br><span class="line">.then(function(results)&#123;</span><br><span class="line">    console.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用Promise.all来执行，all接收一个数组参数，里面的值最终都算返回Promise对象。这样，三个异步操作的并行执行的，等到它们都执行完后才会进到then里面。那么，三个异步操作返回的数据哪里去了呢？都在then里面呢，all会把所有异步操作的结果放进一个数组中传给then，就是上面的results。所以上面代码的输出结果就是：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/520134/201603/520134-20160311004843491-346782307.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。</p><h2 id="race的用法"><a href="#race的用法" class="headerlink" title="race的用法"></a><strong>race的用法</strong></h2><p>all方法的效果实际上是「谁跑的慢，以谁为准执行回调」，那么相对的就有另一个方法「谁跑的快，以谁为准执行回调」，这就是race方法，这个词本来就是赛跑的意思。race的用法与all一样，我们把上面runAsync1的延时改为1秒来看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Promise</span><br><span class="line">.race([runAsync1(), runAsync2(), runAsync3()])</span><br><span class="line">.then(function(results)&#123;</span><br><span class="line">    console.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这三个异步操作同样是并行执行的。结果你应该可以猜到，1秒后runAsync1已经执行完了，此时then里面的就执行了。结果是这样的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/520134/201603/520134-20160311004946022-706413123.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>你猜对了吗？不完全，是吧。在then里面的回调开始执行时，runAsync2()和runAsync3()并没有停止，仍旧再执行。于是再过1秒后，输出了他们结束的标志。</p><p>这个race有什么用呢？使用场景还是很多的，比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//请求某个图片资源</span><br><span class="line">function requestImg()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        var img = new Image();</span><br><span class="line">        img.onload = function()&#123;</span><br><span class="line">            resolve(img);</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = &apos;xxxxxx&apos;;</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//延时函数，用于给请求计时</span><br><span class="line">function timeout()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            reject(&apos;图片请求超时&apos;);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise</span><br><span class="line">.race([requestImg(), timeout()])</span><br><span class="line">.then(function(results)&#123;</span><br><span class="line">    console.log(results);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(reason)&#123;</span><br><span class="line">    console.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>requestImg函数会异步请求一张图片，我把地址写为”xxxxxx”，所以肯定是无法成功请求到的。timeout函数是一个延时5秒的异步操作。我们把这两个返回Promise对象的函数放进race，于是他俩就会赛跑，如果5秒之内图片请求成功了，那么遍进入then方法，执行正常的流程。如果5秒钟图片还未成功返回，那么timeout就跑赢了，则进入catch，报出“图片请求超时”的信息。运行结果如下：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-Promise-用法讲解&quot;&gt;&lt;a href=&quot;#ES6-Promise-用法讲解&quot; class=&quot;headerlink&quot; title=&quot;ES6 Promise 用法讲解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/whybx
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面包屑导航</title>
    <link href="https://tianjiec.top/2018/12/19/%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA/"/>
    <id>https://tianjiec.top/2018/12/19/面包屑导航/</id>
    <published>2018-12-19T11:27:56.000Z</published>
    <updated>2018-12-19T11:32:35.426Z</updated>
    
    <content type="html"><![CDATA[<p>面包屑<a href="https://baike.baidu.com/item/%E5%AF%BC%E8%88%AA" target="_blank" rel="noopener">导航</a>(BreadcrumbNavigation)这个概念来自童话故事”<a href="https://baike.baidu.com/item/%E6%B1%89%E8%B5%9B%E5%B0%94" target="_blank" rel="noopener">汉赛尔</a>和<a href="https://baike.baidu.com/item/%E6%A0%BC%E8%8E%B1%E7%89%B9" target="_blank" rel="noopener">格莱特</a>“，当汉赛尔和格莱特穿过森林时，不小心迷路了，但是他们发现在沿途走过的地方都撒下了面包屑，让这些面包屑来帮助他们找到回家的路。所以，面包屑导航的作用是告诉<a href="https://baike.baidu.com/item/%E8%AE%BF%E9%97%AE%E8%80%85/2774711" target="_blank" rel="noopener">访问者</a>他们目前在网站中的位置以及如何返回。</p><p>主页 &gt;栏目页&gt;文章页面</p><p>小型站点便于优化，可以把主页改成你的关键词，目的是关键词集权于首页。</p><p>关键词&gt;<a href="https://baike.baidu.com/item/%E6%A0%8F%E7%9B%AE%E9%A1%B5" target="_blank" rel="noopener">栏目页</a>&gt;文章页非常清晰，且不存在交叉；否则，面包屑导航的路径</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>1、让用户了解当前所处位置，以及当前页面在整个网站中的位置。</p><p>2、体现了网站的架构层级，能够帮助用户快速学习和了解网站内容和组织方式，从而形成很好的位置感。</p><p>3、提供返回各个层级的快速入口，方便用户操作。</p><p>4、<a href="https://baike.baidu.com/item/Google" target="_blank" rel="noopener">Google</a>已经将面包屑导航整合到搜索结果里面，因此优化面包屑导航每个层级的名称，多使用关键字，都可以实现SEO优化。面包屑路径，对于提高用户体验来说，是很有帮助的。</p><p>5、方便用户，面包屑主要用于为用户提供导航一个网站的次要方法，通过为一个大型多级网站的所有页面提供面包屑路径，用户可以更容易的定位到上一次目录，引导用户通行；</p><p>6、减少返回到上一级页面的点击或操作，不用使用浏览器的“返回”按钮或网站的主要导航来返回到上一级页面；</p><p>7、不用常常占用屏幕空间，因为它们通常是水平排列以及简单的样式，面包屑路径不会占用页面太多的空间。这样的好处是，从内容过载方面来说，他们几乎没有任何负面影响；</p><p>8、降低<a href="https://baike.baidu.com/item/%E8%B7%B3%E5%87%BA%E7%8E%87" target="_blank" rel="noopener">跳出率</a>，面包屑路径会是一个诱惑首次访问者在进入一个页面后去浏览这个网站的非常好的方法。比如说，一个用户通过谷歌搜索到一个页面，然后看到一个面包屑路径，这将会诱使用户点击上一级页面去浏览感兴趣的相关主题。这样，从而，可以降低网站的总体跳出率。</p><p>9、有利于百度蜘蛛对网站的抓取，蜘蛛直接沿着那个链走就可以了，很方便。</p><p>10、面包屑有利于网站<a href="https://baike.baidu.com/item/%E5%86%85%E9%93%BE" target="_blank" rel="noopener">内链</a>的建设，用面包屑大大增加了网站的内部连接，提高用户体验。</p><h3 id="适用条件"><a href="#适用条件" class="headerlink" title="适用条件"></a>适用条件</h3><p>虽然眼下很多网站都流行使用面包屑导航，但是并不是所有的网站都适用。符合下面两个条件的网站才适合使用面包屑导航。1、层级较深的网站，面包屑导航适合层级较深的网站，如果只有一级分类的话，通过主导航就可以起到快速定位的作用。比如“<a href="https://baike.baidu.com/item/%E8%B1%86%E7%93%A3%E7%BD%91" target="_blank" rel="noopener">豆瓣网</a>”类型扁平构架的网站就没有使用面包屑导航。2、独立不交叉的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">网站结构</a>，由于面包屑网站导航路径是线性结构的，因此网站内容必须划分的非常清晰，且不存在交叉；否则，面包屑导航的路径就不是唯一的，同一分类可能出现在不同的路径中，让用户感到困惑。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>编辑</p><p>一、基于位置的面包屑导航</p><p>这种类型是最常见的。这种类型的面包屑导航可以很好的指出当前页面与整个站点的层次结构。这种面包屑导航可以显示当前页面的前一个页面或者目录的<a href="https://baike.baidu.com/item/%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener">链接</a>。可以使访客了解自己的位置，以及可以更快的找到自己想要到达的页面。可以很好的提高用户的友好体验。</p><p>二、基于属性的面包屑导航</p><p>这种面包屑导航最常出现在电子商务站点。这种面包屑导航可以很好的指出当前页面内产品的其他属性或者类别。对于一个产品来说，所具有的属性往往不只有一种，而通过这种面包屑导航可以给消费者一个更加直观的了解。</p><p>三、基于路径的面包屑导航</p><p>这种面包屑导航是最不常见到的。这种面包屑导航和上文所说的童话故事类型很像。他们可以显示访客在到达页面前所访问过的<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5" target="_blank" rel="noopener">网页</a>的链接。这种面包屑导航不是很受欢迎，因为他们的功能基本上是和前进和后退的按钮是一样的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面包屑&lt;a href=&quot;https://baike.baidu.com/item/%E5%AF%BC%E8%88%AA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;导航&lt;/a&gt;(BreadcrumbNavigation)这个概念来自童话故事”&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="https://tianjiec.top/2018/12/18/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://tianjiec.top/2018/12/18/面试题/</id>
    <published>2018-12-18T01:21:11.000Z</published>
    <updated>2018-12-19T02:43:33.203Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、你做的页面在那些浏览器测试过？这些浏览器的内核分别是什么？"><a href="#1、你做的页面在那些浏览器测试过？这些浏览器的内核分别是什么？" class="headerlink" title="1、你做的页面在那些浏览器测试过？这些浏览器的内核分别是什么？"></a>1、你做的页面在那些浏览器测试过？这些浏览器的内核分别是什么？</h4><p>IE：trident内核</p><p>Firefox：gecko内核</p><p>Safari：webkit内核</p><p>Opera：以前是presto内核，现在改用Google的Chrome的blink内核</p><p>Chrome：blink（基于webkit，Google与Opera共同开发）</p><h4 id="2、每个HTML文件里开头都有一个很重要的东西，Doctype，知道这是干什么的吗？"><a href="#2、每个HTML文件里开头都有一个很重要的东西，Doctype，知道这是干什么的吗？" class="headerlink" title="2、每个HTML文件里开头都有一个很重要的东西，Doctype，知道这是干什么的吗？"></a>2、每个HTML文件里开头都有一个很重要的东西，Doctype，知道这是干什么的吗？</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span> 声明于文档中的最前面的位置，处于<span class="tag">&lt;<span class="name">html</span>&gt;</span> 标签之前。此标签可告知浏览器文档使用哪种HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）</span><br></pre></td></tr></table></figure><h4 id="3、Quirks-模式-是什么？-他和Standards模式有什么区别"><a href="#3、Quirks-模式-是什么？-他和Standards模式有什么区别" class="headerlink" title="3、Quirks 模式 是什么？ 他和Standards模式有什么区别"></a>3、Quirks 模式 是什么？ 他和Standards模式有什么区别</h4><p>从IE6开始，引入了Standards模式， 标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。</p><p>在IE6之前 CSS 还不够成熟， 所以 IE5 等之前的浏览器 对 CSS 的支持很差， IE6将对CSS提供更好的支持，然而这时的问题来了，因为有很多页面是基于旧的布局方式写的，而如果IE6支持CSS则将令这些页面显示不正常，如果在既保证不破坏现有页面，有提供新的渲染机制呢？</p><p>在写程序的时候我们也会经常遇到这样的问题，如何保证原来的接口不变，有提供更强大的功能，尤其是新功能不兼容旧功能的时候。 遇到这样的问题是一个常见的做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数不为真时，就是使用旧功能，这样就能不破坏原有程序，又提供新功能。IE刘也是类似这样做的，它将DTD当成了这个参数，就意味着这个页面都将采用CSS支持更好的布局，而如果没有，则将采用兼容之前的布局方式。 这就是Quirks模式（怪癖模式，诡异模式， 怪异模式）。</p><p>区别：</p><p>总体会有布局、 样式解析和脚本执行这三方面的区别。</p><p>盒模型：</p><p>在W3C标准中，如果设置了一个元素的宽和高，指的是元素内容的宽度和高度，而在Quirks模式下。IE的宽度和高度还包含了padding和border。</p><p>设置行内元素的高度：</p><p>在Standards 模式下，给<span>等行内元素设置width和height都不会生效，而在quirks模式下，则会生效。</span></p><p>设置百分比的高度：在standards模式下， 一个元素的高度石油其包含的元素内容来决定的，如果父元素没有设置百分比高度，子元素设置一个百分比高度是无效的。</p><p>margin：0 auto设置水平居中：使用margin:0 auto 在standards模式下 可以使元素水平居中，但在quirks 模式下会失效</p><p>（还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。）</p><h4 id="4、div-css布局较table布局有什么优点？"><a href="#4、div-css布局较table布局有什么优点？" class="headerlink" title="4、div+css布局较table布局有什么优点？"></a>4、div+css布局较table布局有什么优点？</h4><p>改版的时候更方便  是要改css文件。</p><p>页面加载的速度更快、结构化清晰、页面显示简洁。</p><p>表现与结构相分离；</p><p>易于优化（seo）搜索引擎更友好，排名更靠前。</p><h4 id="5、img的alt-与-title-有何异同？-strong-与-em-的异同？"><a href="#5、img的alt-与-title-有何异同？-strong-与-em-的异同？" class="headerlink" title="5、img的alt 与 title 有何异同？ strong 与 em 的异同？"></a>5、img的alt 与 title 有何异同？ strong 与 em 的异同？</h4><p>a: alt（alt text）： 为了能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换的文字。</p><p>替换文字的语言用lang属性来决定。（在IE浏览器下会在没有title时把 alt 当成 tool tip 显示）</p><p>title（tool tip）：该属性为设置该属性的元素提供建议性的信息。</p><p>strong：粗体强调标签，强调，表示内容的重要性；</p><p>em：斜体强调标签，更强烈强调，表示内容强调点；</p><h4 id="6、你能描述一下渐进增强和优雅降级之间的不同吗？"><a href="#6、你能描述一下渐进增强和优雅降级之间的不同吗？" class="headerlink" title="6、你能描述一下渐进增强和优雅降级之间的不同吗？"></a>6、你能描述一下渐进增强和优雅降级之间的不同吗？</h4><p><strong>渐进增强</strong>： progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后在针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p><strong>优雅降级</strong>：graceful degradation ： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。</p><p><strong>区别：</strong>优雅降级是从复杂的现状开始的，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。</p><p><strong>优雅降级</strong>观点</p><p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为过时 或有功能缺失的浏览器下的测试安排在开发周期的最后阶段，并把测试对象限定为主流浏览器 （如IE、Mozilla等）的前一个版本。</p><p>在这种设计规范下，旧版本的浏览器被认为仅能提供“简陋却无妨（poor ，but passable）”的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于他们并非我们所关注的焦点，因此除了修复较大的错误之外，其他的差异将被直接忽略。</p><p><strong>渐进增强</strong>观点</p><p>渐进增强观点则认为应关注内容本身。</p><p>内容使我们创建网站的诱因。有的网站展示它，有的网站收集他，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p><p>那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？</p><h4 id="7、为什么利用多个域名来存储网站资源会更有效？"><a href="#7、为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="7、为什么利用多个域名来存储网站资源会更有效？"></a>7、为什么利用多个域名来存储网站资源会更有效？</h4><p>CDN缓存更方便</p><p>突破浏览器并发限制</p><p>节约cookie带宽</p><p>节约主域名的连接数，优化页面响应速度</p><p>防止不必要的安全问题</p><p>8、请谈一下你对网页标准和标准定义机构重要性的理解。</p><p>网页标准和标准定制机构都是为了让web发展的更健康，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码而导致各种BUG、安全问题，最终提高网站的易用性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、你做的页面在那些浏览器测试过？这些浏览器的内核分别是什么？&quot;&gt;&lt;a href=&quot;#1、你做的页面在那些浏览器测试过？这些浏览器的内核分别是什么？&quot; class=&quot;headerlink&quot; title=&quot;1、你做的页面在那些浏览器测试过？这些浏览器的内核分别是什么
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>夜、萤火虫和你</title>
    <link href="https://tianjiec.top/2018/12/14/%E5%A4%9C%E3%80%81%E8%90%A4%E7%81%AB%E8%99%AB%E5%92%8C%E4%BD%A0/"/>
    <id>https://tianjiec.top/2018/12/14/夜、萤火虫和你/</id>
    <published>2018-12-14T12:51:36.000Z</published>
    <updated>2018-12-14T13:06:22.092Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"音乐/夜、萤火虫和你.mp3"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>  <span class="attr">autoplay</span> <span class="attr">preload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>18/11/7</title>
    <link href="https://tianjiec.top/2018/11/07/18-11-7/"/>
    <id>https://tianjiec.top/2018/11/07/18-11-7/</id>
    <published>2018-11-07T03:48:52.000Z</published>
    <updated>2018-11-07T04:52:38.330Z</updated>
    
    <content type="html"><![CDATA[<p>每当我想好好学习<br>总有人和我说回去睡吧别学了<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://qzonestyle.gtimg.cn/qzone/em/e295.gif" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><br>今天又是爱我熙哥的一天</p><p><img src="http://p1lzepiq0.bkt.clouddn.com/%E7%BD%97%E4%BA%91%E7%86%99.jpg" width="280px" height="400px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每当我想好好学习&lt;br&gt;总有人和我说回去睡吧别学了&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay
      
    
    </summary>
    
    
  </entry>
  
</feed>
